# Provides provide configuration files/options for Infrared
#
providers:
  # Minecraft Servers that run in Docker containers can have labels attached to them.
  # These labels help you configure proxies on the fly in your docker-compose.yml for example.
  #
  #docker:
    # Endpoint URI to access the docker API.
    # Currently only supports unix:///var/run/docker.sock
    #
    #endpoint: unix:///var/run/docker.sock

    # Timeout for the docker API client.
    #
    #clientTimeout: 3s

    # Prefix for Infrared config labels.
    #
    #labelPrefix: infrared.

    # The Docker network name that Infrared should read container labels from.
    #
    #network: infrared

    # If Infrared should watch the network for changes in containers.
    #
    #watch: true

  # Config files that Infrared should read from.
  #
  file:
    # The directory that Infrared should read configs from.
    #
    directory: ./proxies
    
    # Watch the directory for changes in files.
    #
    watch: true

api:
  bind: :8080
  allowedOrigins:
    - "http://*"
    - "https://*"

prometheus:
  bind: :9070

# Configuration for webhooks
#
#webhooks:
  # A webhook defined by an ID. In this case "default"
  #
  #default:
    # Gateway IDs to listen for events to. All events that the connection triggers
    # have also the gateway ID attached to them.
    #
    #gatewayIds:
    #  - default

    # The URL to POST the JSON to
    #
    #url: https://example.com/callback

    # Client timeout specifies a time limit for requests made by the webhook client.
    # A Timeout of zero means no timeout.
    #
    #clientTimeout: 300ms
    
    # Event Topics to listen for.
    # Available events are:
    # NewConnEvent - When a new connection to Infrared is made.
    # PreConnProcessingEvent- Before the new connection is processed.
    # PostConnProcessingEvent - After a connection is processed.
    # PreConnConnectingEvent - Before a client is connecting to the target server.
    # PlayerJoinEvent - When a player joins a server.
    # PlayerLeaveEvent - When a player leaves the server.
    #
    #events:
    #  - PlayerJoin
    #  - PlayerLeave

java:
  # Channel Capacity (ChanCap) is the capacity of a single channel
  # You can think about channels like queues to this would translate
  # to queue size. These describe the amount of connections that can
  # be buffed before the proxy starts dropping connections.
  #
  chanCaps:
    # The capacity of the channel from the gateway to the processing nodes
    #
    connProcessor: 100
    
    # The capacity of the channel from the processing nodes to the server gateway
    #
    server: 100
    
    # The capacity of the channel from the server gateway to the connection pool
    #
    connPool: 10
  
  # Processing nodes are the place where most of the processing is handled.
  processingNode:
    # Count describes the number of processing nodes that concurrently process
    # incoming connections. By increasing the count of processing nodes you can
    # tremendously reduce the effect of DDoS effects at the cost of performance.
    # If you CPU has a lot of thread then feel free to increase this number.
    #
    count: 10
    
    # This is the amount of time a client has to get processed before it get's disconnected
    # from the proxy. If you don't expect players form other continents you should decrease
    # this to some 100ms. If players have issues to connect you should increase this in small increments.
    #
    clientTimeout: 300ms

bedrock:
  chanCap:
    connProcessor: 100
    server: 100
    connPool: 10
  processingNode:
    count: 10
    clientTimeout: 1000ms

defaults:
  webhook:
    # Dial timeout is the amount of time that Infrared waits for it cancels the POST request
    #
    dialTimeout: 1s